#version 330
in vec3 normalInterp;
in vec3 vertPos;

out vec4 fragColor;

uniform vec3 lightPosition;

const vec3 ambientColor = vec3(0.1, 0.0, 0.0);
const vec3 diffuseColor = vec3(1.0, 0.0, 0.0);
const vec3 specColor = vec3(1.0, 1.0, 1.0);
const float shininess = 16.0;

void main(void){
    vec3 normal = normalize(normalInterp);
    vec3 lightDir = normalize(lightPosition - vertPos);
    vec3 viewDir = normalize(-vertPos);
    vec3 halfDir = normalize(lightDir + viewDir);

    float lambertian = max(dot(lightDir, normal), 0.0);
    float specAngle = max(dot(halfDir, normal), 0.0);
    float specular = pow(specAngle, shininess);
    fragColor = vec4(ambientColor + lambertian * diffuseColor + specular * specColor, 1.0);
}
