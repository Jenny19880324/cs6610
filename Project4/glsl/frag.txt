#version 330
in vec3 normalInterp;
in vec3 vertPos;
in vec2 texCoord;

out vec4 fragColor;

uniform float Ns; //Specular exponent
uniform vec3 Ka;  //Ambient color;
uniform vec3 Kd;  //Diffuse color
uniform vec3 Ks;  //Specular color
uniform sampler2D map_Ka; //Ambient color texture map
uniform sampler2D map_Kd; //Diffuse color texture map
uniform sampler2D map_Ks; //Specular color texture map

uniform vec3 lightPosition;

void main(void){
    vec3 normal = normalize(normalInterp);
    vec3 lightDir = normalize(lightPosition - vertPos);
    vec3 viewDir = normalize(-vertPos);
    vec3 halfDir = normalize(lightDir + viewDir);

    float lambertian = max(dot(lightDir, normal), 0.0);
    float specAngle = max(dot(halfDir, normal), 0.0);
    float specular = pow(specAngle, Ns);
    fragColor = vec4(Ka, 1.0) * texture(map_Ka, texCoord)
              + vec4(Kd, 1.0) * texture(map_Kd, texCoord) * lambertian
              + vec4(Ks, 1.0) * texture(map_Ks, texCoord) * specular;
}
